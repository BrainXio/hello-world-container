name: Docker-C.I.C.D.

on:
  push:
    branches:
      - main
      - 'feature/*'
    paths-ignore:
      - '*.md'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - 'hotfix/*'
      - 'bugfix/*'
      - 'release/*'
    paths-ignore:
      - '*.md'
  workflow_dispatch:

env:
  DOCKER_PLATFORMS: linux/amd64,linux/arm64

jobs:
  workflow_info:
    name: Workflow Info
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram
        uses: brainxio/telegram-bot-action@v1
        with:
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            🤖 (It's me! I know you want to know about this..)

            🔍 **Workflow Details**

            🏷️ Repository: `${{ github.repository }}`
            🌿 Branch: `${{ github.ref_name }}`
            🔧 Workflow Name: `${{ github.workflow }}`
            🏃 Run ID: `${{ github.run_id }}`
            🔢 Run Number: `${{ github.run_number }}`
            🔁 Run Attempt: `${{ github.run_attempt }}`
            👤 Actor: `${{ github.actor }}`

            ⚡️ *Sending this message via GitHub Actions from your friendly neighborhood bot*
          parse_mode: 'Markdown'

  build_builder:
    name: Build Builder Image
    runs-on: ubuntu-latest
    needs: workflow_info
    strategy:
      matrix:
        image_base: [alpine, ubuntu]
        image_version: [3.20.0, 20.04]
        exclude:
          - image_base: ubuntu
            image_version: 3.20.0
          - image_base: alpine
            image_version: 20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set APP_NAME
        run: echo "APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f2 | sed 's/-container$//' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set Builder Version
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=$(echo "${GITHUB_SHA}" | head -c 7)
          IMAGE_TAG="${BRANCH}-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}-${SHORT_SHA}-${{ matrix.image_base }}-${{ matrix.image_version }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "BUILDER_IMAGE_TAG=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${IMAGE_TAG}-builder" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and boot a builder instance
        run: docker buildx create --use

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push builder image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.build-${{ matrix.image_base }}
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          build-args: |
            IMAGE_BASE=${{ matrix.image_base }}
            IMAGE_VERSION=${{ matrix.image_version }}
          cache-from: type=gha
          tags: ${{ env.BUILDER_IMAGE_TAG }}

      - name: Save builder image tag
        run: echo "${{ env.BUILDER_IMAGE_TAG }}" > builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}.txt

      - name: Upload builder image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}
          path: builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}.txt

  - name: Send Telegram
    uses: brainxio/telegram-bot-action@v1
    with:
      bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
      message: |
        🔍 **Builder Details**

        🏷️ Repository: `${{ github.repository }}`
        🌿 Branch: `${{ github.ref_name }}`
        🔧 Workflow Name: `${{ github.workflow }}`
        🏃 Run ID: `${{ github.run_id }}`
        🔢 Run Number: `${{ github.run_number }}`
        🔁 Run Attempt: `${{ github.run_attempt }}`
        🆔 Short SHA: `$(echo "${GITHUB_SHA}" | head -c 7)`
        🏷️ Image Tag: `$(echo "$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}-$(echo "${GITHUB_SHA}" | head -c 7)-${{ matrix.image_base }}-${{ matrix.image_version }}")`
        🐳 Builder Image Tag: `${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:$(echo "$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}-$(echo "${GITHUB_SHA}" | head -c 7)-${{ matrix.image_base }}-${{ matrix.image_version }}")-builder`
        📦 Outcome: ${{ job.status }}

        ⚡️ *Sending this message via GitHub Actions from your friendly inter-web bot*
      parse_mode: 'Markdown'

  build_dev:
    name: Build Development
    runs-on: ubuntu-latest
    needs: build_builder
    if: |
      startsWith(github.ref, 'refs/heads/feature/')
    strategy:
      matrix:
        image_base: [alpine, ubuntu]
        image_version: [3.20.0, 20.04]
        exclude:
          - image_base: ubuntu
            image_version: 3.20.0
          - image_base: alpine
            image_version: 20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set APP_NAME
        run: echo "APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f2 | sed 's/-container$//' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set Development Version
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=$(echo "${GITHUB_SHA}" | head -c 7)
          IMAGE_TAG="${BRANCH}-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}-${SHORT_SHA}-${{ matrix.image_base }}-${{ matrix.image_version }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Download builder image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}
          path: .

      - name: Read builder image tag
        run: |
          BUILDER_IMAGE_TAG=$(cat builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}.txt)
          echo "BUILDER_IMAGE=${BUILDER_IMAGE_TAG%:*}" >> $GITHUB_ENV
          echo "BUILDER_VERSION=${BUILDER_IMAGE_TAG##*:}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and boot a builder instance
        run: docker buildx create --use

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push final image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod-${{ matrix.image_base }}
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          build-args: |
            IMAGE_BASE=${{ matrix.image_base }}
            IMAGE_VERSION=${{ matrix.image_version }}
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            BUILDER_VERSION=${{ env.BUILDER_VERSION }}
          cache-from: type=gha
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}

      - name: Run Development Tests Placeholder
        run: echo "Running development tests... Replace with actual test commands."

      - name: Save Docker image as an artifact
        run: docker save ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} | gzip > ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_dev.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_dev_image
          path: ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_dev.tar.gz

      - name: Report Build Outcome
        if: always()
        uses: brainxio/telegram-bot-action@v1
        with:
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            🎉 **Build Development Status**

            🏷️ Repository: `${{ github.repository }}`
            🌿 Branch: `${{ github.ref_name }}`
            🏃 Run ID: `${{ github.run_id }}`
            🔢 Run Number: `${{ github.run_number }}`
            👤 Actor: `${{ github.actor }}`
            📦 Outcome: ${{ job.status }}

  build_test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [workflow_info, build_builder]
    if: |
      github.event_name == 'pull_request' && 
      (startsWith(github.head_ref, 'hotfix/') || 
      startsWith(github.head_ref, 'bugfix/') || 
      startsWith(github.head_ref, 'release/'))
    strategy:
      matrix:
        image_base: [alpine, ubuntu]
        image_version: [3.20.0, 20.04]
        exclude:
          - image_base: ubuntu
            image_version: 3.20.0
          - image_base: alpine
            image_version: 20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set APP_NAME
        run: echo "APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f2 | sed 's/-container$//' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set Test Version
        run: |
          BRANCH=$(echo "${GITHUB_HEAD_REF}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=$(echo "${GITHUB_SHA}" | head -c 7)
          IMAGE_TAG="test-${BRANCH}-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-${SHORT_SHA}-${{ matrix.image_base }}-${{ matrix.image_version }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Download builder image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}
          path: .

      - name: Read builder image tag
        run: |
          BUILDER_IMAGE_TAG=$(cat builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}.txt)
          echo "BUILDER_IMAGE=${BUILDER_IMAGE_TAG%:*}" >> $GITHUB_ENV
          echo "BUILDER_VERSION=${BUILDER_IMAGE_TAG##*:}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and boot a builder instance
        run: docker buildx create --use

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push final image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.test-${{ matrix.image_base }}
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          build-args: |
            IMAGE_BASE=${{ matrix.image_base }}
            IMAGE_VERSION=${{ matrix.image_version }}
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            BUILDER_VERSION=${{ env.BUILDER_VERSION }}
          cache-from: type=gha
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}

      - name: Run Test Placeholder
        run: echo "Running tests... Replace with actual test commands."

      - name: Save Docker image as an artifact
        run: docker save ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} | gzip > ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_test.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_test_image
          path: ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_test.tar.gz

      - name: Report Build Outcome
        if: always()
        uses: brainxio/telegram-bot-action@v1
        with:
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            🎉 **Build Test Status**

            🏷️ Repository: `${{ github.repository }}`
            🌿 Branch: `${{ github.ref_name }}`
            🏃 Run ID: `${{ github.run_id }}`
            🔢 Run Number: `${{ github.run_number }}`
            👤 Actor: `${{ github.actor }}`
            📦 Outcome: ${{ job.status }}

  build_prod:
    name: Build Production
    runs-on: ubuntu-latest
    needs: [workflow_info, build_builder]
    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        image_base: [alpine, ubuntu]
        image_version: [3.20.0, 20.04]
        exclude:
          - image_base: ubuntu
            image_version: 3.20.0
          - image_base: alpine
            image_version: 20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set APP_NAME
        run: echo "APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f2 | sed 's/-container$//' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Load Image Tag from Git Tag
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | head -c 7)
          IMAGE_TAG="${GITHUB_REF##*/}-${SHORT_SHA}-${{ matrix.image_base }}-${{ matrix.image_version }}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Download builder image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}
          path: .

      - name: Read builder image tag
        run: |
          BUILDER_IMAGE_TAG=$(cat builder_image_tag_${{ matrix.image_base }}_${{ matrix.image_version }}.txt)
          echo "BUILDER_IMAGE=${BUILDER_IMAGE_TAG%:*}" >> $GITHUB_ENV
          echo "BUILDER_VERSION=${BUILDER_IMAGE_TAG##*:}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create and boot a builder instance
        run: docker buildx create --use

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push final image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.prod-${{ matrix.image_base }}
          push: true
          platforms: ${{ env.DOCKER_PLATFORMS }}
          build-args: |
            IMAGE_BASE=${{ matrix.image_base }}
            IMAGE_VERSION=${{ matrix.image_version }}
            BUILDER_IMAGE=${{ env.BUILDER_IMAGE }}
            BUILDER_VERSION=${{ env.BUILDER_VERSION }}
          cache-from: type=gha
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:latest

      - name: Save Docker image as an artifact
        run: docker save ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} | gzip > ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_prod.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_prod_image
          path: ${{ github.workspace }}/${{ env.APP_NAME }}_${{ env.IMAGE_TAG }}_prod.tar.gz

      - name: Report Build Outcome
        if: always()
        uses: brainxio/telegram-bot-action@v1
        with:
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            🎉 **Build Production Status**

            🏷️ Repository: `${{ github.repository }}`
            🌿 Branch: `${{ github.ref_name }}`
            🏃 Run ID: `${{ github.run_id }}`
            🔢 Run Number: `${{ github.run_number }}`
            👤 Actor: `${{ github.actor }}`
            📦 Outcome: ${{ job.status }}

  generate_changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: build_prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Load Image Tag from Git Tag
        run: echo "IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Switch to main branch
        run: git checkout main

      - name: Git Config
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "Github Actions"

      - name: Create Changelog
        run: |
          git fetch --all --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "# Changelog" > CHANGELOG.md
          echo "## Version ${GITHUB_REF##*/}" >> CHANGELOG.md
          echo '### Commits' >> CHANGELOG.md
          git log $LATEST_TAG..HEAD --pretty=format:"- %s (%an)" >> CHANGELOG.md
          git add CHANGELOG.md
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit"
          else
            git commit -m "Update CHANGELOG for ${GITHUB_REF##*/}"
            git push origin main
          fi

      - name: Report Changelog Outcome
        if: always()
        uses: brainxio/telegram-bot-action@v1
        with:
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            📋 **Changelog Generation Status**

            🌿 Branch: `main`
            🔢 Version: `${{ env.IMAGE_TAG }}`
            📦 Outcome: ${{ job.status }}
            [View CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)

  release_dev:
    name: Release Development
    runs-on: ubuntu-latest
    needs: build_dev
    if: startsWith(github.ref, 'refs/heads/feature/')
    steps:
      - name: Set APP_NAME
        run: echo "APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f2 | sed 's/-container$//' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Load Image Tag from Artifacts
        run: |
          BRANCH=$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=$(echo "${GITHUB_SHA}" | head -c 7)
          IMAGE_TAG="${BRANCH}-${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ATTEMPT}-${SHORT_SHA}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Deploy to Development Environment
        run: echo "Deploying ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} to development environment."

      - name: Report Dev Release Outcome
        if: always()
        uses: brainxio/telegram-bot-action@v1
        with:
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            🤖 **Development Release Status**

            🌿 Branch: `${{ github.ref_name }}`
            🔢 Version: `${{ env.IMAGE_TAG }}`
            🐳 Image: `docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}`
            📦 Outcome: ${{ job.status }}

  release_prod:
    name: Release Production
    runs-on: ubuntu-latest
    needs: [build_prod, generate_changelog]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Set APP_NAME
        run: echo "APP_NAME=$(echo ${{ github.repository }} | cut -d '/' -f2 | sed 's/-container$//' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Load Image Tag from Git Tag
        run: echo "IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Deploy to Production Environment
        run: echo "Deploying ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} to production environment."

      - name: Report Prod Release Outcome
        if: always()
        uses: brainxio/telegram-bot-action@v1
        with:
          bot_token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          chat_id: ${{ secrets.TELEGRAM_CHAT_ID }}
          message: |
            🤖 **Production Release Status**

            🌿 Branch: `main`
            🔢 Version: `${{ env.IMAGE_TAG }}`
            🐳 Image: `docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}`
            📦 Outcome: ${{ job.status }}
